{"version":3,"sources":["tangojs-connector-local-testmodel.coffee","tangojs-connector-local-testmodel.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AACA,MAAA,kBAAA,CAAA;;AAIA,oBAAA,GAAqB,YAAA;AAEnB,QAAA,IAAA,CAAA;AAAA,QAAA,GACE;AAAA,WAAA,EAAO,IAAP;AACA,YAAA,EAAQ,WADR;AAEA,mBAAA,EAAe,EAFf;KCKD,CAAC;AACF,WDFA;AAAA,aAAA,EACE;AAAA,YAAA,EACE;AAAA,aAAA,EACE;AAAA,kBAAA,EAAQ,kBAAA;ACIJ,qBDHF,CAAC,IAAI,CAAC,KAAN,EAAa,IAAI,CAAC,MAAlB,CAAA,CAAA;aADF;AAEA,gBAAA,EAAM,gBAAA;ACKF,qBDJF;AAAA,yBAAA,EAAW,aAAX;AACA,wBAAA,EAAU,IADV;AAEA,wBAAA,EAAU,WAFV;AAGA,mBAAA,EAAK,eAHL;AAIA,uBAAA,EAAS,KAJT;AAKA,6BAAA,EAAe,YALf;AAMA,+BAAA,EAAiB,YANjB;AAOA,oBAAA,EAAM,gBAPN;AAQA,mBAAA,EAAK,IARL;AASA,sBAAA,EAAQ,EATR;AAUA,yBAAA,EAAW,EAVX;AAWA,uBAAA,EAAS,OAXT;eCiBG,CAAC;aDpBN;AAeA,sBAAA,EACE;AAAA,2BAAA,EACE;AAAA,oBAAA,EAAM,gBAAA;ACQF,yBDPF,IAAI,CAAC,aAAA,CAAA;iBADP;AAEA,qBAAA,EAAO,eAAC,CAAD,EAAA;ACSH,yBDRF,IAAI,CAAC,aAAL,GAAqB,CAAA,CAAA;iBAHvB;AAIA,qBAAA,EAAO,iBAAA;ACUH,yBDTF,IAAI,CAAC,aAAL,GAAqB,EAAA,CAAA;iBALvB;AAMA,oBAAA,EAAM,gBAAA;ACWF,yBDVF;AAAA,+BAAA,EAAa,QAAb;AACA,6BAAA,EAAW,UADX;AAEA,+BAAA,EAAa,kBAFb;AAGA,gCAAA,EAAc,GAHd;AAIA,8BAAA,EAAY,EAJZ;AAKA,0BAAA,EAAQ,EALR;AAMA,yBAAA,EAAO,eANP;AAOA,yBAAA,EAAO,UAPP;AAQA,6BAAA,EAAW,EARX;AASA,6BAAA,EAAW,CATX;AAUA,6BAAA,EAAW,CAVX;AAWA,6BAAA,EAAW,GAXX;AAYA,6BAAA,EAAW,EAZX;AAaA,6BAAA,EAAW,CAbX;AAcA,wBAAA,EAAM,eAdN;AAeA,iCAAA,EAAe,GAff;AAgBA,wBAAA,EAAM,GAhBN;AAiBA,4BAAA,EAAU,YAjBV;AAkBA,sCAAA,EAAoB,EAlBpB;mBC8BG,CAAC;iBDrCN;eADF;aAhBF;AA2CA,oBAAA,EACE;AAAA,oBAAA,EACE;AAAA,uBAAA,EAAS,iBAAC,KAAD,EAAA;ACgBL,yBDfF,CAAA,GAAI,KAAA,CAAA;iBADN;AAEA,oBAAA,EAAM,gBAAA;ACiBF,yBDhBF;AAAA,4BAAA,EAAU,QAAV;AACA,2BAAA,EAAS,CADT;AAEA,2BAAA,EAAS,CAFT;AAGA,gCAAA,EAAc,kBAHd;AAIA,yBAAA,EAAO,UAJP;AAKA,4BAAA,EAAU,CALV;AAMA,iCAAA,EAAe,gBANf;mBCwBG,CAAC;iBD3BN;eADF;aA5CF;WADF;SADF;OADF;KCkFC,CAAC;GDzFiB,CAAA;;AAkErB,MAAA,WAAA,GAAA,kBAAA,CAAA","file":"tangojs-connector-local-testmodel.js","sourcesContent":["\n###*\n * Example model factory.\n * @return {Object} simple model with 'tangojs/test/1' device\n ###\n__TestModelFactory = ->\n\n  data =\n    state: 'ON'\n    status: 'Status OK'\n    number_scalar: 50\n\n  tangojs:\n    test:\n      '1':\n        status: ->\n          [data.state, data.status]\n        info: ->\n          classname: 'TangoJsTest'\n          exported: true\n          hostname: 'localhost'\n          ior: 'IOR:123456789'\n          is_taco: false\n          last_exported: '2015-01-01'\n          last_unexported: '2015-01-01'\n          name: 'tangojs/test/1'\n          pid: 1234\n          server: ''\n          taco_info: ''\n          version: '0.1.0'\n        attributes:\n          number_scalar:\n            read: ->\n              data.number_scalar\n            write: (v) ->\n              data.number_scalar = v\n            reset: ->\n              data.number_scalar = 50\n            info: ->\n              data_format: 'SCALAR'\n              data_type: 'ATT_LONG'\n              description: 'scalar attribute'\n              display_unit: 'u'\n              extensions: []\n              format: ''\n              label: 'number_scalar'\n              level: 'OPERATOR'\n              max_alarm: 90\n              max_dim_x: 0\n              max_dim_y: 0\n              max_value: 100\n              min_alarm: 10\n              min_value: 0\n              name: 'number_scalar'\n              standard_unit: 'u'\n              unit: 'u'\n              writable: 'READ_WRITE'\n              writable_attr_name: ''\n        commands:\n          double:\n            execute: (argin) ->\n              2 * argin\n            info: ->\n              cmd_name: 'double'\n              cmd_tag: 0\n              in_type: 0 # TODO this should be enum / constant (??)\n              in_type_desc: 'number to double'\n              level: 'OPERATOR'\n              out_type: 0\n              out_type_desc: 'doubled number'\n\n`export const createModel = __TestModelFactory`\n","\n/**\n * Example model factory.\n * @return {Object} simple model with 'tangojs/test/1' device\n */\nvar __TestModelFactory;\n\n__TestModelFactory = function() {\n  var data;\n  data = {\n    state: 'ON',\n    status: 'Status OK',\n    number_scalar: 50\n  };\n  return {\n    tangojs: {\n      test: {\n        '1': {\n          status: function() {\n            return [data.state, data.status];\n          },\n          info: function() {\n            return {\n              classname: 'TangoJsTest',\n              exported: true,\n              hostname: 'localhost',\n              ior: 'IOR:123456789',\n              is_taco: false,\n              last_exported: '2015-01-01',\n              last_unexported: '2015-01-01',\n              name: 'tangojs/test/1',\n              pid: 1234,\n              server: '',\n              taco_info: '',\n              version: '0.1.0'\n            };\n          },\n          attributes: {\n            number_scalar: {\n              read: function() {\n                return data.number_scalar;\n              },\n              write: function(v) {\n                return data.number_scalar = v;\n              },\n              reset: function() {\n                return data.number_scalar = 50;\n              },\n              info: function() {\n                return {\n                  data_format: 'SCALAR',\n                  data_type: 'ATT_LONG',\n                  description: 'scalar attribute',\n                  display_unit: 'u',\n                  extensions: [],\n                  format: '',\n                  label: 'number_scalar',\n                  level: 'OPERATOR',\n                  max_alarm: 90,\n                  max_dim_x: 0,\n                  max_dim_y: 0,\n                  max_value: 100,\n                  min_alarm: 10,\n                  min_value: 0,\n                  name: 'number_scalar',\n                  standard_unit: 'u',\n                  unit: 'u',\n                  writable: 'READ_WRITE',\n                  writable_attr_name: ''\n                };\n              }\n            }\n          },\n          commands: {\n            double: {\n              execute: function(argin) {\n                return 2 * argin;\n              },\n              info: function() {\n                return {\n                  cmd_name: 'double',\n                  cmd_tag: 0,\n                  in_type: 0,\n                  in_type_desc: 'number to double',\n                  level: 'OPERATOR',\n                  out_type: 0,\n                  out_type_desc: 'doubled number'\n                };\n              }\n            }\n          }\n        }\n      }\n    }\n  };\n};\n\nexport const createModel = __TestModelFactory;\n"],"sourceRoot":"/source/"}