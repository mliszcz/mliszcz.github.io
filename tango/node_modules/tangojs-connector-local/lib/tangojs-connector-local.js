'use strict';

(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(['exports'], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports);
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports);
    global.tangojsConnectorLocal = mod.exports;
  }
})(this, function (exports) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  function _possibleConstructorReturn(self, call) {
    if (!self) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return call && ((typeof call === 'undefined' ? 'undefined' : _typeof(call)) === "object" || typeof call === "function") ? call : self;
  }

  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === 'undefined' ? 'undefined' : _typeof(superClass)));
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
  }

  var _slicedToArray = (function () {
    function sliceIterator(arr, i) {
      var _arr = [];
      var _n = true;
      var _d = false;
      var _e = undefined;

      try {
        for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
          _arr.push(_s.value);

          if (i && _arr.length === i) break;
        }
      } catch (err) {
        _d = true;
        _e = err;
      } finally {
        try {
          if (!_n && _i["return"]) _i["return"]();
        } finally {
          if (_d) throw _e;
        }
      }

      return _arr;
    }

    return function (arr, i) {
      if (Array.isArray(arr)) {
        return arr;
      } else if (Symbol.iterator in Object(arr)) {
        return sliceIterator(arr, i);
      } else {
        throw new TypeError("Invalid attempt to destructure non-iterable instance");
      }
    };
  })();

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var _createClass = (function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  })();

  function _typeof(obj) {
    return obj && typeof Symbol !== "undefined" && obj.constructor === Symbol ? "symbol" : typeof obj;
  }

  var wrapAsPromisedArray = function wrapAsPromisedArray(x) {
    return Promise.resolve(Array.isArray(x) ? x : [x]);
  };

  var extractPropnames = function extractPropnames(propnames) {
    return (Array.isArray(propnames) ? propnames : [propnames]).map(function (p) {
      return p instanceof tangojs.struct.DbDatum ? p.name : typeof p === 'string' || p instanceof String ? p : '';
    }).filter(function (p) {
      return p !== '';
    });
  };

  var asRegex = function asRegex(pattern) {
    return new RegExp(pattern.replace('*', '.*'), 'g');
  };

  var slash = new RegExp('/', 'g');

  function flatten(object, depth, separator) {
    return depth === 1 ? object : Object.keys(object).reduce(function (flattened, key1) {
      var value = object[key1];
      var merged = undefined;

      if ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) !== 'object' || value == null) {
        merged = {};
        merged[key1] = value;
      } else {
        (function () {
          var child = flatten(object[key1], depth - 1, separator);
          merged = Object.keys(child).reduce(function (acc, key2) {
            acc['' + key1 + separator + key2] = child[key2];
            return acc;
          }, {});
        })();
      }

      return Object.assign(flattened, merged);
    }, {});
  }

  function reject(message) {
    return Promise.reject(new Error(message));
  }

  var DeviceTreeInspector = (function () {
    function DeviceTreeInspector(model) {
      _classCallCheck(this, DeviceTreeInspector);

      this._model = model;
    }

    _createClass(DeviceTreeInspector, [{
      key: 'getDevice',
      value: function getDevice(devname) {
        try {
          var _devname$split = devname.split('/');

          var _devname$split2 = _slicedToArray(_devname$split, 3);

          var domain = _devname$split2[0];
          var family = _devname$split2[1];
          var member = _devname$split2[2];
          return Promise.resolve(this._model[domain][family][member]);
        } catch (error) {
          return reject('Invalid device name: \'' + name + '\'');
        }
      }
    }, {
      key: 'getAttribute',
      value: function getAttribute(devname, attname) {
        return this.getDevice(devname).then(function (device) {
          return device.attributes && device.attributes[attname] ? device.attributes[attname] : reject('Attribute not found: \'' + devname + '/' + attname + '\'');
        });
      }
    }, {
      key: 'getCommand',
      value: function getCommand(devname, cmdname) {
        return this.getDevice(devname).then(function (device) {
          return device.commands && device.commands[cmdname] ? device.commands[cmdname] : reject('Command not found: \'' + devname + '/' + cmdname + '\'');
        });
      }
    }, {
      key: 'getProperty',
      value: function getProperty(devname, propname) {
        return this.getDevice(devname).then(function (device) {
          return device.properties && device.properties[propname] ? device.properties[propname] : reject('Property not found: \'' + devname + '/' + propname + '\'');
        });
      }
    }, {
      key: 'getDeviceNameList',
      value: function getDeviceNameList() {
        return Object.keys(flatten(this._model, 3, '/')).filter(function (key) {
          return (key.match(slash) || []).length === 2;
        });
      }
    }]);

    return DeviceTreeInspector;
  })();

  var LocalConnector = (function (_tangojs$Connector) {
    _inherits(LocalConnector, _tangojs$Connector);

    function LocalConnector(model, inspector) {
      _classCallCheck(this, LocalConnector);

      var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(LocalConnector).call(this));

      _this._model = model;
      _this._tree = inspector || new DeviceTreeInspector(model);
      return _this;
    }

    _createClass(LocalConnector, [{
      key: 'get_device_status',
      value: function get_device_status(devname) {
        return this._tree.getDevice(devname).then(function (device) {
          return device.get_status();
        });
      }
    }, {
      key: 'get_device_state',
      value: function get_device_state(devname) {
        return this._tree.getDevice(devname).then(function (device) {
          return device.get_state();
        });
      }
    }, {
      key: 'get_device_info',
      value: function get_device_info(devname) {
        return this._tree.getDevice(devname).then(function (device) {
          return device.get_info();
        });
      }
    }, {
      key: 'get_device_list',
      value: function get_device_list(pattern) {
        var regex = asRegex(pattern);
        return this._tree.getDeviceNameList().then(function (list) {
          return list.filter(function (s) {
            return s.match(regex);
          });
        });
      }
    }, {
      key: 'get_device_domain',
      value: function get_device_domain(pattern) {
        throw new Error(pattern);
      }
    }, {
      key: 'get_device_family',
      value: function get_device_family(pattern) {
        throw new Error(pattern);
      }
    }, {
      key: 'get_device_member',
      value: function get_device_member(pattern) {
        throw new Error(pattern);
      }
    }, {
      key: 'get_device_property_list',
      value: function get_device_property_list(devname, pattern) {
        var regex = asRegex(pattern);
        return this._tree.getDevice(devname).then(function (device) {
          return Object.keys(device.properties).filter(function (s) {
            return s.match(regex);
          });
        });
      }
    }, {
      key: 'get_device_property',
      value: function get_device_property(devname, propnames) {
        var _this2 = this;

        var props = extractPropnames(propnames).map(function (p) {
          return _this2._tree.getProperty(devname, p);
        });
        return Array.isArray(propnames) ? Promise.all(props) : props[0];
      }
    }, {
      key: 'put_device_property',
      value: function put_device_property(devname, prop) {
        return this._tree.getDevice(devname).then(function (device) {
          device.properties = device.properties || {};
          device.properties[prop.name] = prop;
        });
      }
    }, {
      key: 'delete_device_property',
      value: function delete_device_property(devname, propnames) {
        return this._tree.getDevice(devname).then(function (device) {
          extractPropnames(propnames).forEach(function (p) {
            delete device.properties[p];
          });
        });
      }
    }, {
      key: 'get_device_attribute_list',
      value: function get_device_attribute_list(devname) {
        return this._tree.getDevice(devname).then(function (device) {
          return Object.keys(device.attributes);
        });
      }
    }, {
      key: 'get_device_attribute_info',
      value: function get_device_attribute_info(devname, attnames) {
        var _this3 = this;

        var names = attnames ? wrapAsPromisedArray(attnames) : this.get_device_attribute_list(devname);
        return names.then(function (names) {
          return Promise.all(names.map(function (n) {
            return _this3._tree.getAttribute(devname, n).then(function (a) {
              return a.get_info();
            });
          }));
        }).then(function (infos) {
          return attnames ? Array.isArray(attnames) ? infos : infos[0] : infos;
        });
      }
    }, {
      key: 'read_device_attribute',
      value: function read_device_attribute(devname, attnames) {
        var _this4 = this;

        return wrapAsPromisedArray(attnames).then(function (attnames) {
          return Promise.all(attnames.map(function (attname) {
            return _this4._tree.getAttribute(devname, attname).then(function (a) {
              return a.get_value();
            });
          }));
        }).then(function (attrs) {
          return Array.isArray(attnames) ? attrs : attrs[0];
        });
      }
    }, {
      key: 'write_device_attribute',
      value: function write_device_attribute(devname, attrs) {
        var _this5 = this;

        return wrapAsPromisedArray(attrs).then(function (attrs) {
          return attrs.map(function (a) {
            return [a.name, a.value];
          });
        }).then(function (nvList) {
          return Promise.all(nvList.map(function (_ref) {
            var _ref2 = _slicedToArray(_ref, 2);

            var name = _ref2[0];
            var value = _ref2[1];
            return _this5._tree.getAttribute(devname, name).then(function (attr) {
              return attr.set_value(value);
            });
          }));
        });
      }
    }, {
      key: 'write_read_device_attribute',
      value: function write_read_device_attribute(devname, attrs) {
        attrs;
        throw new Error('not implemented yet');
      }
    }, {
      key: 'device_command_inout',
      value: function device_command_inout(devname, cmdname, argin) {
        return this._tree.getCommand(devname, cmdname).then(function (cmd) {
          return cmd.inout(argin);
        });
      }
    }, {
      key: 'device_command_query',
      value: function device_command_query(devname, cmdname) {
        return this._tree.getCommand(devname, cmdname).then(function (cmd) {
          return cmd.get_info();
        });
      }
    }, {
      key: 'device_command_list_query',
      value: function device_command_list_query(devname) {
        var _this6 = this;

        return this._tree.getDevice(devname).then(function (device) {
          return Object.keys(device.commands);
        }).then(function (cmdnames) {
          return Promise.all(cmdnames.map(function (cmdname) {
            return _this6._tree.getCommand(devname, cmdname).then(function (cmd) {
              return cmd.get_info();
            });
          }));
        });
      }
    }]);

    return LocalConnector;
  })(tangojs.Connector);

  exports.LocalConnector = LocalConnector;
});
//# sourceMappingURL=tangojs-connector-local.js.map
