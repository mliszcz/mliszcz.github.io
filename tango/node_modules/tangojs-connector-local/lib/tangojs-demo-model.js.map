{"version":3,"sources":["demo-model.coffee"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAmMA,WAAA,WAAA,WAAA,GAAA,gBAAA","file":"tangojs-demo-model.js","sourcesContent":["\n`import * as tangojs from 'tangojs'`\n\n###*\n * @private\n ###\ncreateDeviceAttributeStruct = (name, data_format, value) ->\n  new tangojs.struct.DeviceAttribute\n    data_format: data_format\n    data_type: undefined\n    err_list: []\n    name: name\n    quality: tangojs.tango.AttrQuality.ATTR_VALID\n    r_dim: null\n    time: new tangojs.tango.TimeVal\n      tv_sec: parseInt(new Date().getTime()/1000)\n      tv_usec: 0\n      tv_nsec: 0\n    value: value\n    w_dim: null\n\n###*\n * @private\n ###\ncreateAttribute = (initial\n                   name,\n                   unit,\n                   data_format,\n                   format,\n                   level,\n                   writable,\n                   min_value,\n                   max_value,\n                   alarm\n                   ) ->\n  _value = initial\n  get_info: -> new tangojs.struct.AttributeInfo\n    att_alarm: alarm\n    data_format: data_format\n    data_type: undefined\n    description: name\n    display_unit: unit\n    enum_labels: []\n    event_prop: null\n    extensions: []\n    format: format\n    label: name\n    level: level\n    max_dim_x: undefined\n    max_dim_y: undefined\n    max_value: min_value\n    mem_init: false\n    memorized: false\n    min_value: max_value\n    name: name\n    root_attr_name: undefined\n    standard_unit: unit\n    writable: writable\n    writable_attr_name: undefined\n  get_value: -> createDeviceAttributeStruct(name, data_format, _value)\n  set_value: (v) ->\n    _value = v\n\n###*\n * @private\n ###\ncreateCommand = (handler,\n                 name,\n                 level) ->\n  get_info: -> new tangojs.struct.CommandInfo\n    cmd_name: name\n    cmd_tag: 0\n    in_type: undefined\n    in_type_desc: 'command input'\n    level: level\n    out_type: undefined\n    out_type_desc: 'command output'\n  inout: (devData) -> new tangojs.struct.DeviceData(handler(devData.value))\n\n###*\n * @private\n ###\ncreateDevice = (name) ->\n\n  _name = name\n  _state = tangojs.tango.DevState.OFF\n\n  get_status: -> 'ON'\n  get_state: -> _state\n\n  get_info: -> new tangojs.struct.DeviceInfo\n    exported: true\n    ior: 'IOR:123456789'\n    name: _name\n\n  properties:\n    scalar: new tangojs.struct.DbDatum('scalar', 1)\n    string: new tangojs.struct.DbDatum('string', 'test')\n    boolean: new tangojs.struct.DbDatum('boolean', true)\n\n  attributes:\n    scalar: createAttribute(0,\n                            'scalar',\n                            'u',\n                            tangojs.tango.AttrDataFormat.SCALAR,\n                            'scientific,setprecision(3)',\n                            tangojs.tango.DispLevel.OPERATOR,\n                            tangojs.tango.AttrWriteType.READ_WRITE,\n                            '0',\n                            '100',\n                            new tangojs.tango.AttributeAlarm({\n                              max_warning: '50'\n                              max_alarm: '70'\n                            }))\n    string: createAttribute(undefined,\n                            'string'\n                            undefined,\n                            tangojs.tango.AttrDataFormat.SCALAR,\n                            undefined,\n                            tangojs.tango.DispLevel.OPERATOR,\n                            tangojs.tango.AttrWriteType.READ_WRITE,\n                            undefined,\n                            undefined,\n                            null)\n    sine_trend: (->\n      name = 'sine_trend'\n      format = 'scientific,setprecision(3)'\n      attr = createAttribute(0,\n                             name,\n                             'u',\n                             tangojs.tango.AttrDataFormat.SCALAR,\n                             format,\n                             tangojs.tango.DispLevel.OPERATOR,\n                             tangojs.tango.AttrWriteType.READ,\n                             undefined,\n                             undefined,\n                             null)\n      attr.get_value = ->\n        value = Math.sin((new Date()).getTime()/1000.0)\n        createDeviceAttributeStruct(name, format, value)\n      attr\n    )()\n    boolean: createAttribute(false,\n                             'boolean'\n                             undefined,\n                             tangojs.tango.AttrDataFormat.SCALAR,\n                             undefined,\n                             tangojs.tango.DispLevel.OPERATOR,\n                             tangojs.tango.AttrWriteType.READ_WRITE,\n                             undefined,\n                             undefined,\n                             null)\n    spectrum: createAttribute(([1..10].map (_i) -> Math.random()),\n                              'spectrum'\n                              undefined,\n                              tangojs.tango.AttrDataFormat.SPECTRUM,\n                              undefined,\n                              tangojs.tango.DispLevel.OPERATOR,\n                              tangojs.tango.AttrWriteType.READ,\n                              undefined,\n                              undefined,\n                              null)\n\n  commands:\n    double_arg: createCommand(((x) -> 2*x),\n                              'double',\n                              tangojs.tango.DispLevel.OPERATOR)\n    to_upper: createCommand(((x) -> x.toUpperCase()),\n                            'to_upper',\n                            tangojs.tango.DispLevel.OPERATOR)\n    goto_on: createCommand((-> _state = tangojs.tango.DevState.ON),\n                           'goto_on',\n                           tangojs.tango.DispLevel.OPERATOR)\n    goto_off: createCommand((-> _state = tangojs.tango.DevState.OFF),\n                            'goto_off',\n                            tangojs.tango.DispLevel.OPERATOR)\n    goto_fault: createCommand((-> _state = tangojs.tango.DevState.FAULT),\n                              'goto_fault',\n                              tangojs.tango.DispLevel.OPERATOR)\n    goto_alarm: createCommand((-> _state = tangojs.tango.DevState.ALARM),\n                              'goto_off',\n                              tangojs.tango.DispLevel.OPERATOR)\n\n###*\n * @private\n ###\ncreateTangoModel = ->\n  tangojs:\n    test:\n      dev1: createDevice('tangojs/test/dev1')\n      dev2: createDevice('tangojs/test/dev2')\n  other:\n    test:\n      mock: createDevice('other/test/mock')\n\n`export const createModel = createTangoModel`\n"],"sourceRoot":"/source/"}