"use strict";

function _typeof(obj) { return obj && typeof Symbol !== "undefined" && obj.constructor === Symbol ? "symbol" : typeof obj; }

(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports);
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports);
    global.tangojs = mod.exports;
  }
})(this, function (exports) {
  (function (global, factory) {
    if (typeof define === "function" && define.amd) {
      define(["exports"], factory);
    } else if (typeof exports !== "undefined") {
      factory(exports);
    } else {
      var mod = {
        exports: {}
      };
      factory(mod.exports);
      global.tangojs = mod.exports;
    }
  })(this, function (exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });

    function _possibleConstructorReturn(self, call) {
      if (!self) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }

      return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
    }

    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
      }

      subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
          value: subClass,
          enumerable: false,
          writable: true,
          configurable: true
        }
      });
      if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
    }

    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }

    var _createClass = (function () {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }

      return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);
        if (staticProps) defineProperties(Constructor, staticProps);
        return Constructor;
      };
    })();

    var generatedTango = {
      get AttrDataFormat() {
        return AttrDataFormat;
      },

      get AttrQuality() {
        return AttrQuality;
      },

      get AttrWriteType() {
        return AttrWriteType;
      },

      get AttributeDataType() {
        return AttributeDataType;
      },

      get DevSource() {
        return DevSource;
      },

      get DevState() {
        return DevState;
      },

      get DispLevel() {
        return DispLevel;
      },

      get ErrSeverity() {
        return ErrSeverity;
      },

      get LockerLanguage() {
        return LockerLanguage;
      },

      get PipeWriteType() {
        return PipeWriteType;
      },

      get ArchiveEventProp() {
        return ArchiveEventProp;
      },

      get AttDataReady() {
        return AttDataReady;
      },

      get AttributeAlarm() {
        return AttributeAlarm;
      },

      get AttributeConfig() {
        return AttributeConfig;
      },

      get AttributeConfig_2() {
        return AttributeConfig_2;
      },

      get AttributeConfig_3() {
        return AttributeConfig_3;
      },

      get AttributeConfig_5() {
        return AttributeConfig_5;
      },

      get AttributeDim() {
        return AttributeDim;
      },

      get AttributeValue() {
        return AttributeValue;
      },

      get AttributeValue_3() {
        return AttributeValue_3;
      },

      get AttributeValue_4() {
        return AttributeValue_4;
      },

      get AttributeValue_5() {
        return AttributeValue_5;
      },

      get ChangeEventProp() {
        return ChangeEventProp;
      },

      get DevAttrHistory() {
        return DevAttrHistory;
      },

      get DevAttrHistory_3() {
        return DevAttrHistory_3;
      },

      get DevAttrHistory_4() {
        return DevAttrHistory_4;
      },

      get DevAttrHistory_5() {
        return DevAttrHistory_5;
      },

      get DevCmdHistory() {
        return DevCmdHistory;
      },

      get DevCmdHistory_4() {
        return DevCmdHistory_4;
      },

      get DevCmdInfo() {
        return DevCmdInfo;
      },

      get DevCmdInfo_2() {
        return DevCmdInfo_2;
      },

      get DevEncoded() {
        return DevEncoded;
      },

      get DevError() {
        return DevError;
      },

      get DevFailed() {
        return DevFailed;
      },

      get DevInfo() {
        return DevInfo;
      },

      get DevInfo_3() {
        return DevInfo_3;
      },

      get DevIntrChange() {
        return DevIntrChange;
      },

      get DevPipeBlob() {
        return DevPipeBlob;
      },

      get DevPipeData() {
        return DevPipeData;
      },

      get DevPipeDataElt() {
        return DevPipeDataElt;
      },

      get DevVarDoubleStringArray() {
        return DevVarDoubleStringArray;
      },

      get DevVarLongStringArray() {
        return DevVarLongStringArray;
      },

      get EltInArray() {
        return EltInArray;
      },

      get EventProperties() {
        return EventProperties;
      },

      get JavaClntIdent() {
        return JavaClntIdent;
      },

      get MultiDevFailed() {
        return MultiDevFailed;
      },

      get NamedDevError() {
        return NamedDevError;
      },

      get PeriodicEventProp() {
        return PeriodicEventProp;
      },

      get PipeConfig() {
        return PipeConfig;
      },

      get TimeVal() {
        return TimeVal;
      },

      get ZmqCallInfo() {
        return ZmqCallInfo;
      },

      get Device() {
        return Device;
      },

      get Device_2() {
        return Device_2;
      },

      get Device_3() {
        return Device_3;
      },

      get Device_4() {
        return Device_4;
      },

      get Device_5() {
        return Device_5;
      }

    };
    var connector = null;

    function setConnector(conn) {
      exports.connector = connector = conn;
    }

    var Connector = (function () {
      function Connector() {
        _classCallCheck(this, Connector);
      }

      _createClass(Connector, [{
        key: "get_device_status",
        value: function get_device_status(devname) {}
      }, {
        key: "get_device_state",
        value: function get_device_state(devname) {}
      }, {
        key: "get_device_info",
        value: function get_device_info(devname) {}
      }, {
        key: "get_device_list",
        value: function get_device_list(pattern) {}
      }, {
        key: "get_device_domain",
        value: function get_device_domain(pattern) {}
      }, {
        key: "get_device_family",
        value: function get_device_family(pattern) {}
      }, {
        key: "get_device_member",
        value: function get_device_member(pattern) {}
      }, {
        key: "get_device_property_list",
        value: function get_device_property_list(devname, pattern) {}
      }, {
        key: "get_device_property",
        value: function get_device_property(devname, propnames) {}
      }, {
        key: "put_device_property",
        value: function put_device_property(devname, properties) {}
      }, {
        key: "delete_device_property",
        value: function delete_device_property(devname, propnames) {}
      }, {
        key: "get_device_attribute_list",
        value: function get_device_attribute_list(devname) {}
      }, {
        key: "get_device_attribute_info",
        value: function get_device_attribute_info(devname, attnames) {}
      }, {
        key: "read_device_attribute",
        value: function read_device_attribute(devname, attname) {}
      }, {
        key: "write_device_attribute",
        value: function write_device_attribute(devname, attrs) {}
      }, {
        key: "write_read_device_attribute",
        value: function write_read_device_attribute(devname, attrs) {}
      }, {
        key: "device_command_inout",
        value: function device_command_inout(devname, cmdname, argin) {}
      }, {
        key: "device_command_query",
        value: function device_command_query(devname, cmdname) {}
      }, {
        key: "device_command_list_query",
        value: function device_command_list_query(devname) {}
      }]);

      return Connector;
    })();

    var DeviceProxy = (function () {
      function DeviceProxy(devname) {
        _classCallCheck(this, DeviceProxy);

        this._devname = devname;
      }

      _createClass(DeviceProxy, [{
        key: "name",
        value: function name() {
          return this.get_info().then(function (info) {
            return info.name;
          });
        }
      }, {
        key: "status",
        value: function status() {
          return connector.get_device_status(this._devname);
        }
      }, {
        key: "state",
        value: function state() {
          return connector.get_device_state(this._devname);
        }
      }, {
        key: "command_query",
        value: function command_query(cmdname) {
          return connector.device_command_query(this._devname, cmdname);
        }
      }, {
        key: "command_list_query",
        value: function command_list_query() {
          return connector.device_command_list_query(this._devname);
        }
      }, {
        key: "get_info",
        value: function get_info() {
          return connector.get_device_info(this._devname);
        }
      }, {
        key: "get_property_list",
        value: function get_property_list(pattern) {
          return connector.get_device_property_list(this._devname, pattern);
        }
      }, {
        key: "get_property",
        value: function get_property(propnames) {
          return connector.get_device_property(this._devname, propnames);
        }
      }, {
        key: "put_property",
        value: function put_property(properties) {
          return connector.put_device_property(this._devname, properties);
        }
      }, {
        key: "delete_property",
        value: function delete_property(propnames) {
          return connector.delete_device_property(this._devname, propnames);
        }
      }, {
        key: "get_attribute_list",
        value: function get_attribute_list() {
          return connector.get_device_attribute_list(this._devname);
        }
      }, {
        key: "get_attribute_info",
        value: function get_attribute_info(attnames) {
          return connector.get_device_attribute_info(this._devname, attnames);
        }
      }, {
        key: "read_attribute",
        value: function read_attribute(attname) {
          return connector.read_device_attribute(this._devname, attname);
        }
      }, {
        key: "write_attribute",
        value: function write_attribute(attrs) {
          return connector.write_device_attribute(this._devname, attrs);
        }
      }, {
        key: "write_read_attribute",
        value: function write_read_attribute(attrs) {
          return connector.write_read_device_attribute(this._devname, attrs);
        }
      }, {
        key: "command_inout",
        value: function command_inout(cmdname, argin) {
          return connector.device_command_inout(this._devname, cmdname, argin);
        }
      }]);

      return DeviceProxy;
    })();

    var Database = (function () {
      function Database() {
        _classCallCheck(this, Database);
      }

      _createClass(Database, [{
        key: "get_device_list",
        value: function get_device_list(pattern) {
          return connector.get_device_list(pattern);
        }
      }, {
        key: "get_device_domain",
        value: function get_device_domain(pattern) {
          return connector.get_device_domain(pattern);
        }
      }, {
        key: "get_device_family",
        value: function get_device_family(pattern) {
          return connector.get_device_family(pattern);
        }
      }, {
        key: "get_device_member",
        value: function get_device_member(pattern) {
          return connector.get_device_member(pattern);
        }
      }]);

      return Database;
    })();

    var CommandProxy = (function () {
      function CommandProxy(devname, cmdname) {
        _classCallCheck(this, CommandProxy);

        this._cmdname = cmdname;
        this._proxy = new DeviceProxy(devname);
      }

      _createClass(CommandProxy, [{
        key: "get_info",
        value: function get_info() {
          return this._proxy.command_query(this._cmdname);
        }
      }, {
        key: "inout",
        value: function inout(argin) {
          return this._proxy.command_inout(this._cmdname, argin);
        }
      }]);

      return CommandProxy;
    })();

    var AttributeProxy = (function () {
      function AttributeProxy(devname, attname) {
        _classCallCheck(this, AttributeProxy);

        this._attname = attname;
        this._proxy = new DeviceProxy(devname);
      }

      _createClass(AttributeProxy, [{
        key: "get_info",
        value: function get_info() {
          return this._proxy.get_attribute_info(this._attname);
        }
      }, {
        key: "read",
        value: function read() {
          return this._proxy.read_attribute(this._attname);
        }
      }, {
        key: "write",
        value: function write(attr) {
          var a = Object.assign({}, attr._data, {
            name: this._attname
          });
          return this._proxy.write_attribute(a);
        }
      }]);

      return AttributeProxy;
    })();

    var proxy = {
      AttributeProxy: AttributeProxy,
      CommandProxy: CommandProxy,
      Database: Database,
      DeviceProxy: DeviceProxy
    };

    var DeviceInfo = (function () {
      function DeviceInfo(data) {
        _classCallCheck(this, DeviceInfo);

        this._data = data;
      }

      _createClass(DeviceInfo, [{
        key: "classname",
        get: function get() {
          return this._data.classname;
        }
      }, {
        key: "exported",
        get: function get() {
          return this._data.exported;
        }
      }, {
        key: "hostname",
        get: function get() {
          return this._data.hostname;
        }
      }, {
        key: "ior",
        get: function get() {
          return this._data.ior;
        }
      }, {
        key: "is_taco",
        get: function get() {
          return this._data.is_taco;
        }
      }, {
        key: "last_exported",
        get: function get() {
          return this._data.last_exported;
        }
      }, {
        key: "last_unexported",
        get: function get() {
          return this._data.last_unexported;
        }
      }, {
        key: "name",
        get: function get() {
          return this._data.name;
        }
      }, {
        key: "pid",
        get: function get() {
          return this._data.pid;
        }
      }, {
        key: "server",
        get: function get() {
          return this._data.server;
        }
      }, {
        key: "taco_data",
        get: function get() {
          return this._data.taco_data;
        }
      }, {
        key: "version",
        get: function get() {
          return this._data.version;
        }
      }]);

      return DeviceInfo;
    })();

    var DeviceData = (function () {
      function DeviceData(value) {
        _classCallCheck(this, DeviceData);

        this._value = value;
      }

      _createClass(DeviceData, [{
        key: "value",
        get: function get() {
          return this._value;
        },
        set: function set(value) {
          this._value = value;
        }
      }]);

      return DeviceData;
    })();

    var AttributeValue_5 = (function () {
      function AttributeValue_5() {
        var data = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

        _classCallCheck(this, AttributeValue_5);

        this._data = Object.assign({}, data);
      }

      _createClass(AttributeValue_5, [{
        key: "value",
        get: function get() {
          return this._data.value;
        }
      }, {
        key: "quality",
        get: function get() {
          return this._data.quality;
        }
      }, {
        key: "data_format",
        get: function get() {
          return this._data.data_format;
        }
      }, {
        key: "data_type",
        get: function get() {
          return this._data.data_type;
        }
      }, {
        key: "time",
        get: function get() {
          return this._data.time;
        }
      }, {
        key: "name",
        get: function get() {
          return this._data.name;
        }
      }, {
        key: "r_dim",
        get: function get() {
          return this._data.r_dim;
        }
      }, {
        key: "w_dim",
        get: function get() {
          return this._data.w_dim;
        }
      }, {
        key: "err_list",
        get: function get() {
          return this._data.err_list;
        }
      }]);

      return AttributeValue_5;
    })();

    var DeviceAttribute = (function (_AttributeValue_) {
      _inherits(DeviceAttribute, _AttributeValue_);

      function DeviceAttribute(data) {
        _classCallCheck(this, DeviceAttribute);

        return _possibleConstructorReturn(this, Object.getPrototypeOf(DeviceAttribute).call(this, data));
      }

      return DeviceAttribute;
    })(AttributeValue_5);

    var DbDatum = (function () {
      function DbDatum(name, value) {
        _classCallCheck(this, DbDatum);

        this._name = name;
        this._value = value;
      }

      _createClass(DbDatum, [{
        key: "name",
        get: function get() {
          return this._name;
        }
      }, {
        key: "value",
        get: function get() {
          return this._value;
        },
        set: function set(value) {
          this._value = value;
        }
      }]);

      return DbDatum;
    })();

    var DevCmdInfo_2 = (function () {
      function DevCmdInfo_2() {
        var data = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

        _classCallCheck(this, DevCmdInfo_2);

        this._data = Object.assign({}, data);
      }

      _createClass(DevCmdInfo_2, [{
        key: "cmd_name",
        get: function get() {
          return this._data.cmd_name;
        }
      }, {
        key: "level",
        get: function get() {
          return this._data.level;
        }
      }, {
        key: "cmd_tag",
        get: function get() {
          return this._data.cmd_tag;
        }
      }, {
        key: "in_type",
        get: function get() {
          return this._data.in_type;
        }
      }, {
        key: "out_type",
        get: function get() {
          return this._data.out_type;
        }
      }, {
        key: "in_type_desc",
        get: function get() {
          return this._data.in_type_desc;
        }
      }, {
        key: "out_type_desc",
        get: function get() {
          return this._data.out_type_desc;
        }
      }]);

      return DevCmdInfo_2;
    })();

    var CommandInfo = (function (_DevCmdInfo_) {
      _inherits(CommandInfo, _DevCmdInfo_);

      function CommandInfo(data) {
        _classCallCheck(this, CommandInfo);

        return _possibleConstructorReturn(this, Object.getPrototypeOf(CommandInfo).call(this, data));
      }

      return CommandInfo;
    })(DevCmdInfo_2);

    var AttributeConfig_5 = (function () {
      function AttributeConfig_5() {
        var data = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

        _classCallCheck(this, AttributeConfig_5);

        this._data = Object.assign({}, data);
      }

      _createClass(AttributeConfig_5, [{
        key: "name",
        get: function get() {
          return this._data.name;
        }
      }, {
        key: "writable",
        get: function get() {
          return this._data.writable;
        }
      }, {
        key: "data_format",
        get: function get() {
          return this._data.data_format;
        }
      }, {
        key: "data_type",
        get: function get() {
          return this._data.data_type;
        }
      }, {
        key: "memorized",
        get: function get() {
          return this._data.memorized;
        }
      }, {
        key: "mem_init",
        get: function get() {
          return this._data.mem_init;
        }
      }, {
        key: "max_dim_x",
        get: function get() {
          return this._data.max_dim_x;
        }
      }, {
        key: "max_dim_y",
        get: function get() {
          return this._data.max_dim_y;
        }
      }, {
        key: "description",
        get: function get() {
          return this._data.description;
        }
      }, {
        key: "label",
        get: function get() {
          return this._data.label;
        }
      }, {
        key: "unit",
        get: function get() {
          return this._data.unit;
        }
      }, {
        key: "standard_unit",
        get: function get() {
          return this._data.standard_unit;
        }
      }, {
        key: "display_unit",
        get: function get() {
          return this._data.display_unit;
        }
      }, {
        key: "format",
        get: function get() {
          return this._data.format;
        }
      }, {
        key: "min_value",
        get: function get() {
          return this._data.min_value;
        }
      }, {
        key: "max_value",
        get: function get() {
          return this._data.max_value;
        }
      }, {
        key: "writable_attr_name",
        get: function get() {
          return this._data.writable_attr_name;
        }
      }, {
        key: "level",
        get: function get() {
          return this._data.level;
        }
      }, {
        key: "root_attr_name",
        get: function get() {
          return this._data.root_attr_name;
        }
      }, {
        key: "enum_labels",
        get: function get() {
          return this._data.enum_labels;
        }
      }, {
        key: "att_alarm",
        get: function get() {
          return this._data.att_alarm;
        }
      }, {
        key: "event_prop",
        get: function get() {
          return this._data.event_prop;
        }
      }, {
        key: "extensions",
        get: function get() {
          return this._data.extensions;
        }
      }, {
        key: "sys_extensions",
        get: function get() {
          return this._data.sys_extensions;
        }
      }]);

      return AttributeConfig_5;
    })();

    var AttributeInfo = (function (_AttributeConfig_) {
      _inherits(AttributeInfo, _AttributeConfig_);

      function AttributeInfo(data) {
        _classCallCheck(this, AttributeInfo);

        return _possibleConstructorReturn(this, Object.getPrototypeOf(AttributeInfo).call(this, data));
      }

      return AttributeInfo;
    })(AttributeConfig_5);

    var struct = {
      AttributeInfo: AttributeInfo,
      CommandInfo: CommandInfo,
      DbDatum: DbDatum,
      DeviceAttribute: DeviceAttribute,
      DeviceData: DeviceData,
      DeviceInfo: DeviceInfo
    };

    function EnumConstant(key, value) {
      return Object.freeze({
        key: key,
        value: value
      });
    }

    function Enum(mapping) {
      var constants = Object.keys(mapping).reduce(function (acc, key) {
        return acc[key] = EnumConstant(key, mapping[key]), acc;
      }, {});
      var reverseMapping = Object.keys(mapping).reduce(function (acc, key) {
        return acc[mapping[key]] = constants[key], acc;
      }, {});

      constants.fromValue = function (value) {
        return reverseMapping[value];
      };

      return Object.freeze(constants);
    }

    var AttrDataFormat = Enum({
      SCALAR: 0,
      SPECTRUM: 1,
      IMAGE: 2,
      FMT_UNKNOWN: 3
    });
    var AttrQuality = Enum({
      ATTR_VALID: 0,
      ATTR_INVALID: 1,
      ATTR_ALARM: 2,
      ATTR_CHANGING: 3,
      ATTR_WARNING: 4
    });
    var AttrWriteType = Enum({
      READ: 0,
      READ_WITH_WRITE: 1,
      WRITE: 2,
      READ_WRITE: 3,
      WT_UNKNOWN: 4
    });
    var AttributeDataType = Enum({
      ATT_BOOL: 0,
      ATT_SHORT: 1,
      ATT_LONG: 2,
      ATT_LONG64: 3,
      ATT_FLOAT: 4,
      ATT_DOUBLE: 5,
      ATT_UCHAR: 6,
      ATT_USHORT: 7,
      ATT_ULONG: 8,
      ATT_ULONG64: 9,
      ATT_STRING: 10,
      ATT_STATE: 11,
      DEVICE_STATE: 12,
      ATT_ENCODED: 13,
      ATT_NO_DATA: 14
    });
    var DevSource = Enum({
      DEV: 0,
      CACHE: 1,
      CACHE_DEV: 2
    });
    var DevState = Enum({
      ON: 0,
      OFF: 1,
      CLOSE: 2,
      OPEN: 3,
      INSERT: 4,
      EXTRACT: 5,
      MOVING: 6,
      STANDBY: 7,
      FAULT: 8,
      INIT: 9,
      RUNNING: 10,
      ALARM: 11,
      DISABLE: 12,
      UNKNOWN: 13
    });
    var DispLevel = Enum({
      OPERATOR: 0,
      EXPERT: 1,
      DL_UNKNOWN: 2
    });
    var ErrSeverity = Enum({
      WARN: 0,
      ERR: 1,
      PANIC: 2
    });
    var LockerLanguage = Enum({
      CPP: 0,
      JAVA: 1
    });
    var PipeWriteType = Enum({
      PIPE_READ: 0,
      PIPE_READ_WRITE: 1,
      PIPE_WT_UNKNOWN: 2
    });

    var ArchiveEventProp = (function () {
      function ArchiveEventProp() {
        var data = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

        _classCallCheck(this, ArchiveEventProp);

        this._data = Object.assign({}, data);
      }

      _createClass(ArchiveEventProp, [{
        key: "rel_change",
        get: function get() {
          return this._data.rel_change;
        }
      }, {
        key: "abs_change",
        get: function get() {
          return this._data.abs_change;
        }
      }, {
        key: "period",
        get: function get() {
          return this._data.period;
        }
      }, {
        key: "extensions",
        get: function get() {
          return this._data.extensions;
        }
      }]);

      return ArchiveEventProp;
    })();

    var AttDataReady = (function () {
      function AttDataReady() {
        var data = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

        _classCallCheck(this, AttDataReady);

        this._data = Object.assign({}, data);
      }

      _createClass(AttDataReady, [{
        key: "name",
        get: function get() {
          return this._data.name;
        }
      }, {
        key: "data_type",
        get: function get() {
          return this._data.data_type;
        }
      }, {
        key: "ctr",
        get: function get() {
          return this._data.ctr;
        }
      }]);

      return AttDataReady;
    })();

    var AttributeAlarm = (function () {
      function AttributeAlarm() {
        var data = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

        _classCallCheck(this, AttributeAlarm);

        this._data = Object.assign({}, data);
      }

      _createClass(AttributeAlarm, [{
        key: "min_alarm",
        get: function get() {
          return this._data.min_alarm;
        }
      }, {
        key: "max_alarm",
        get: function get() {
          return this._data.max_alarm;
        }
      }, {
        key: "min_warning",
        get: function get() {
          return this._data.min_warning;
        }
      }, {
        key: "max_warning",
        get: function get() {
          return this._data.max_warning;
        }
      }, {
        key: "delta_t",
        get: function get() {
          return this._data.delta_t;
        }
      }, {
        key: "delta_val",
        get: function get() {
          return this._data.delta_val;
        }
      }, {
        key: "extensions",
        get: function get() {
          return this._data.extensions;
        }
      }]);

      return AttributeAlarm;
    })();

    var AttributeConfig = (function () {
      function AttributeConfig() {
        var data = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

        _classCallCheck(this, AttributeConfig);

        this._data = Object.assign({}, data);
      }

      _createClass(AttributeConfig, [{
        key: "name",
        get: function get() {
          return this._data.name;
        }
      }, {
        key: "writable",
        get: function get() {
          return this._data.writable;
        }
      }, {
        key: "data_format",
        get: function get() {
          return this._data.data_format;
        }
      }, {
        key: "data_type",
        get: function get() {
          return this._data.data_type;
        }
      }, {
        key: "max_dim_x",
        get: function get() {
          return this._data.max_dim_x;
        }
      }, {
        key: "max_dim_y",
        get: function get() {
          return this._data.max_dim_y;
        }
      }, {
        key: "description",
        get: function get() {
          return this._data.description;
        }
      }, {
        key: "label",
        get: function get() {
          return this._data.label;
        }
      }, {
        key: "unit",
        get: function get() {
          return this._data.unit;
        }
      }, {
        key: "standard_unit",
        get: function get() {
          return this._data.standard_unit;
        }
      }, {
        key: "display_unit",
        get: function get() {
          return this._data.display_unit;
        }
      }, {
        key: "format",
        get: function get() {
          return this._data.format;
        }
      }, {
        key: "min_value",
        get: function get() {
          return this._data.min_value;
        }
      }, {
        key: "max_value",
        get: function get() {
          return this._data.max_value;
        }
      }, {
        key: "min_alarm",
        get: function get() {
          return this._data.min_alarm;
        }
      }, {
        key: "max_alarm",
        get: function get() {
          return this._data.max_alarm;
        }
      }, {
        key: "writable_attr_name",
        get: function get() {
          return this._data.writable_attr_name;
        }
      }, {
        key: "extensions",
        get: function get() {
          return this._data.extensions;
        }
      }]);

      return AttributeConfig;
    })();

    var AttributeConfig_2 = (function () {
      function AttributeConfig_2() {
        var data = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

        _classCallCheck(this, AttributeConfig_2);

        this._data = Object.assign({}, data);
      }

      _createClass(AttributeConfig_2, [{
        key: "name",
        get: function get() {
          return this._data.name;
        }
      }, {
        key: "writable",
        get: function get() {
          return this._data.writable;
        }
      }, {
        key: "data_format",
        get: function get() {
          return this._data.data_format;
        }
      }, {
        key: "data_type",
        get: function get() {
          return this._data.data_type;
        }
      }, {
        key: "max_dim_x",
        get: function get() {
          return this._data.max_dim_x;
        }
      }, {
        key: "max_dim_y",
        get: function get() {
          return this._data.max_dim_y;
        }
      }, {
        key: "description",
        get: function get() {
          return this._data.description;
        }
      }, {
        key: "label",
        get: function get() {
          return this._data.label;
        }
      }, {
        key: "unit",
        get: function get() {
          return this._data.unit;
        }
      }, {
        key: "standard_unit",
        get: function get() {
          return this._data.standard_unit;
        }
      }, {
        key: "display_unit",
        get: function get() {
          return this._data.display_unit;
        }
      }, {
        key: "format",
        get: function get() {
          return this._data.format;
        }
      }, {
        key: "min_value",
        get: function get() {
          return this._data.min_value;
        }
      }, {
        key: "max_value",
        get: function get() {
          return this._data.max_value;
        }
      }, {
        key: "min_alarm",
        get: function get() {
          return this._data.min_alarm;
        }
      }, {
        key: "max_alarm",
        get: function get() {
          return this._data.max_alarm;
        }
      }, {
        key: "writable_attr_name",
        get: function get() {
          return this._data.writable_attr_name;
        }
      }, {
        key: "level",
        get: function get() {
          return this._data.level;
        }
      }, {
        key: "extensions",
        get: function get() {
          return this._data.extensions;
        }
      }]);

      return AttributeConfig_2;
    })();

    var AttributeConfig_3 = (function () {
      function AttributeConfig_3() {
        var data = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

        _classCallCheck(this, AttributeConfig_3);

        this._data = Object.assign({}, data);
      }

      _createClass(AttributeConfig_3, [{
        key: "name",
        get: function get() {
          return this._data.name;
        }
      }, {
        key: "writable",
        get: function get() {
          return this._data.writable;
        }
      }, {
        key: "data_format",
        get: function get() {
          return this._data.data_format;
        }
      }, {
        key: "data_type",
        get: function get() {
          return this._data.data_type;
        }
      }, {
        key: "max_dim_x",
        get: function get() {
          return this._data.max_dim_x;
        }
      }, {
        key: "max_dim_y",
        get: function get() {
          return this._data.max_dim_y;
        }
      }, {
        key: "description",
        get: function get() {
          return this._data.description;
        }
      }, {
        key: "label",
        get: function get() {
          return this._data.label;
        }
      }, {
        key: "unit",
        get: function get() {
          return this._data.unit;
        }
      }, {
        key: "standard_unit",
        get: function get() {
          return this._data.standard_unit;
        }
      }, {
        key: "display_unit",
        get: function get() {
          return this._data.display_unit;
        }
      }, {
        key: "format",
        get: function get() {
          return this._data.format;
        }
      }, {
        key: "min_value",
        get: function get() {
          return this._data.min_value;
        }
      }, {
        key: "max_value",
        get: function get() {
          return this._data.max_value;
        }
      }, {
        key: "writable_attr_name",
        get: function get() {
          return this._data.writable_attr_name;
        }
      }, {
        key: "level",
        get: function get() {
          return this._data.level;
        }
      }, {
        key: "att_alarm",
        get: function get() {
          return this._data.att_alarm;
        }
      }, {
        key: "event_prop",
        get: function get() {
          return this._data.event_prop;
        }
      }, {
        key: "extensions",
        get: function get() {
          return this._data.extensions;
        }
      }, {
        key: "sys_extensions",
        get: function get() {
          return this._data.sys_extensions;
        }
      }]);

      return AttributeConfig_3;
    })();

    var AttributeDim = (function () {
      function AttributeDim() {
        var data = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

        _classCallCheck(this, AttributeDim);

        this._data = Object.assign({}, data);
      }

      _createClass(AttributeDim, [{
        key: "dim_x",
        get: function get() {
          return this._data.dim_x;
        }
      }, {
        key: "dim_y",
        get: function get() {
          return this._data.dim_y;
        }
      }]);

      return AttributeDim;
    })();

    var AttributeValue = (function () {
      function AttributeValue() {
        var data = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

        _classCallCheck(this, AttributeValue);

        this._data = Object.assign({}, data);
      }

      _createClass(AttributeValue, [{
        key: "value",
        get: function get() {
          return this._data.value;
        }
      }, {
        key: "quality",
        get: function get() {
          return this._data.quality;
        }
      }, {
        key: "time",
        get: function get() {
          return this._data.time;
        }
      }, {
        key: "name",
        get: function get() {
          return this._data.name;
        }
      }, {
        key: "dim_x",
        get: function get() {
          return this._data.dim_x;
        }
      }, {
        key: "dim_y",
        get: function get() {
          return this._data.dim_y;
        }
      }]);

      return AttributeValue;
    })();

    var AttributeValue_3 = (function () {
      function AttributeValue_3() {
        var data = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

        _classCallCheck(this, AttributeValue_3);

        this._data = Object.assign({}, data);
      }

      _createClass(AttributeValue_3, [{
        key: "value",
        get: function get() {
          return this._data.value;
        }
      }, {
        key: "quality",
        get: function get() {
          return this._data.quality;
        }
      }, {
        key: "time",
        get: function get() {
          return this._data.time;
        }
      }, {
        key: "name",
        get: function get() {
          return this._data.name;
        }
      }, {
        key: "r_dim",
        get: function get() {
          return this._data.r_dim;
        }
      }, {
        key: "w_dim",
        get: function get() {
          return this._data.w_dim;
        }
      }, {
        key: "err_list",
        get: function get() {
          return this._data.err_list;
        }
      }]);

      return AttributeValue_3;
    })();

    var AttributeValue_4 = (function () {
      function AttributeValue_4() {
        var data = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

        _classCallCheck(this, AttributeValue_4);

        this._data = Object.assign({}, data);
      }

      _createClass(AttributeValue_4, [{
        key: "value",
        get: function get() {
          return this._data.value;
        }
      }, {
        key: "quality",
        get: function get() {
          return this._data.quality;
        }
      }, {
        key: "data_format",
        get: function get() {
          return this._data.data_format;
        }
      }, {
        key: "time",
        get: function get() {
          return this._data.time;
        }
      }, {
        key: "name",
        get: function get() {
          return this._data.name;
        }
      }, {
        key: "r_dim",
        get: function get() {
          return this._data.r_dim;
        }
      }, {
        key: "w_dim",
        get: function get() {
          return this._data.w_dim;
        }
      }, {
        key: "err_list",
        get: function get() {
          return this._data.err_list;
        }
      }]);

      return AttributeValue_4;
    })();

    var ChangeEventProp = (function () {
      function ChangeEventProp() {
        var data = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

        _classCallCheck(this, ChangeEventProp);

        this._data = Object.assign({}, data);
      }

      _createClass(ChangeEventProp, [{
        key: "rel_change",
        get: function get() {
          return this._data.rel_change;
        }
      }, {
        key: "abs_change",
        get: function get() {
          return this._data.abs_change;
        }
      }, {
        key: "extensions",
        get: function get() {
          return this._data.extensions;
        }
      }]);

      return ChangeEventProp;
    })();

    var DevAttrHistory = (function () {
      function DevAttrHistory() {
        var data = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

        _classCallCheck(this, DevAttrHistory);

        this._data = Object.assign({}, data);
      }

      _createClass(DevAttrHistory, [{
        key: "attr_failed",
        get: function get() {
          return this._data.attr_failed;
        }
      }, {
        key: "value",
        get: function get() {
          return this._data.value;
        }
      }, {
        key: "errors",
        get: function get() {
          return this._data.errors;
        }
      }]);

      return DevAttrHistory;
    })();

    var DevAttrHistory_3 = (function () {
      function DevAttrHistory_3() {
        var data = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

        _classCallCheck(this, DevAttrHistory_3);

        this._data = Object.assign({}, data);
      }

      _createClass(DevAttrHistory_3, [{
        key: "attr_failed",
        get: function get() {
          return this._data.attr_failed;
        }
      }, {
        key: "value",
        get: function get() {
          return this._data.value;
        }
      }]);

      return DevAttrHistory_3;
    })();

    var DevAttrHistory_4 = (function () {
      function DevAttrHistory_4() {
        var data = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

        _classCallCheck(this, DevAttrHistory_4);

        this._data = Object.assign({}, data);
      }

      _createClass(DevAttrHistory_4, [{
        key: "name",
        get: function get() {
          return this._data.name;
        }
      }, {
        key: "dates",
        get: function get() {
          return this._data.dates;
        }
      }, {
        key: "value",
        get: function get() {
          return this._data.value;
        }
      }, {
        key: "quals",
        get: function get() {
          return this._data.quals;
        }
      }, {
        key: "quals_array",
        get: function get() {
          return this._data.quals_array;
        }
      }, {
        key: "r_dims",
        get: function get() {
          return this._data.r_dims;
        }
      }, {
        key: "r_dims_array",
        get: function get() {
          return this._data.r_dims_array;
        }
      }, {
        key: "w_dims",
        get: function get() {
          return this._data.w_dims;
        }
      }, {
        key: "w_dims_array",
        get: function get() {
          return this._data.w_dims_array;
        }
      }, {
        key: "errors",
        get: function get() {
          return this._data.errors;
        }
      }, {
        key: "errors_array",
        get: function get() {
          return this._data.errors_array;
        }
      }]);

      return DevAttrHistory_4;
    })();

    var DevAttrHistory_5 = (function () {
      function DevAttrHistory_5() {
        var data = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

        _classCallCheck(this, DevAttrHistory_5);

        this._data = Object.assign({}, data);
      }

      _createClass(DevAttrHistory_5, [{
        key: "name",
        get: function get() {
          return this._data.name;
        }
      }, {
        key: "data_format",
        get: function get() {
          return this._data.data_format;
        }
      }, {
        key: "data_type",
        get: function get() {
          return this._data.data_type;
        }
      }, {
        key: "dates",
        get: function get() {
          return this._data.dates;
        }
      }, {
        key: "value",
        get: function get() {
          return this._data.value;
        }
      }, {
        key: "quals",
        get: function get() {
          return this._data.quals;
        }
      }, {
        key: "quals_array",
        get: function get() {
          return this._data.quals_array;
        }
      }, {
        key: "r_dims",
        get: function get() {
          return this._data.r_dims;
        }
      }, {
        key: "r_dims_array",
        get: function get() {
          return this._data.r_dims_array;
        }
      }, {
        key: "w_dims",
        get: function get() {
          return this._data.w_dims;
        }
      }, {
        key: "w_dims_array",
        get: function get() {
          return this._data.w_dims_array;
        }
      }, {
        key: "errors",
        get: function get() {
          return this._data.errors;
        }
      }, {
        key: "errors_array",
        get: function get() {
          return this._data.errors_array;
        }
      }]);

      return DevAttrHistory_5;
    })();

    var DevCmdHistory = (function () {
      function DevCmdHistory() {
        var data = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

        _classCallCheck(this, DevCmdHistory);

        this._data = Object.assign({}, data);
      }

      _createClass(DevCmdHistory, [{
        key: "time",
        get: function get() {
          return this._data.time;
        }
      }, {
        key: "cmd_failed",
        get: function get() {
          return this._data.cmd_failed;
        }
      }, {
        key: "value",
        get: function get() {
          return this._data.value;
        }
      }, {
        key: "errors",
        get: function get() {
          return this._data.errors;
        }
      }]);

      return DevCmdHistory;
    })();

    var DevCmdHistory_4 = (function () {
      function DevCmdHistory_4() {
        var data = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

        _classCallCheck(this, DevCmdHistory_4);

        this._data = Object.assign({}, data);
      }

      _createClass(DevCmdHistory_4, [{
        key: "dates",
        get: function get() {
          return this._data.dates;
        }
      }, {
        key: "value",
        get: function get() {
          return this._data.value;
        }
      }, {
        key: "dims",
        get: function get() {
          return this._data.dims;
        }
      }, {
        key: "dims_array",
        get: function get() {
          return this._data.dims_array;
        }
      }, {
        key: "errors",
        get: function get() {
          return this._data.errors;
        }
      }, {
        key: "errors_array",
        get: function get() {
          return this._data.errors_array;
        }
      }, {
        key: "cmd_type",
        get: function get() {
          return this._data.cmd_type;
        }
      }]);

      return DevCmdHistory_4;
    })();

    var DevCmdInfo = (function () {
      function DevCmdInfo() {
        var data = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

        _classCallCheck(this, DevCmdInfo);

        this._data = Object.assign({}, data);
      }

      _createClass(DevCmdInfo, [{
        key: "cmd_name",
        get: function get() {
          return this._data.cmd_name;
        }
      }, {
        key: "cmd_tag",
        get: function get() {
          return this._data.cmd_tag;
        }
      }, {
        key: "in_type",
        get: function get() {
          return this._data.in_type;
        }
      }, {
        key: "out_type",
        get: function get() {
          return this._data.out_type;
        }
      }, {
        key: "in_type_desc",
        get: function get() {
          return this._data.in_type_desc;
        }
      }, {
        key: "out_type_desc",
        get: function get() {
          return this._data.out_type_desc;
        }
      }]);

      return DevCmdInfo;
    })();

    var DevEncoded = (function () {
      function DevEncoded() {
        var data = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

        _classCallCheck(this, DevEncoded);

        this._data = Object.assign({}, data);
      }

      _createClass(DevEncoded, [{
        key: "encoded_format",
        get: function get() {
          return this._data.encoded_format;
        }
      }, {
        key: "encoded_data",
        get: function get() {
          return this._data.encoded_data;
        }
      }]);

      return DevEncoded;
    })();

    var DevError = (function () {
      function DevError() {
        var data = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

        _classCallCheck(this, DevError);

        this._data = Object.assign({}, data);
      }

      _createClass(DevError, [{
        key: "reason",
        get: function get() {
          return this._data.reason;
        }
      }, {
        key: "severity",
        get: function get() {
          return this._data.severity;
        }
      }, {
        key: "desc",
        get: function get() {
          return this._data.desc;
        }
      }, {
        key: "origin",
        get: function get() {
          return this._data.origin;
        }
      }]);

      return DevError;
    })();

    var DevFailed = (function () {
      function DevFailed() {
        var data = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

        _classCallCheck(this, DevFailed);

        this._data = Object.assign({}, data);
      }

      _createClass(DevFailed, [{
        key: "errors",
        get: function get() {
          return this._data.errors;
        }
      }]);

      return DevFailed;
    })();

    var DevInfo = (function () {
      function DevInfo() {
        var data = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

        _classCallCheck(this, DevInfo);

        this._data = Object.assign({}, data);
      }

      _createClass(DevInfo, [{
        key: "dev_class",
        get: function get() {
          return this._data.dev_class;
        }
      }, {
        key: "server_id",
        get: function get() {
          return this._data.server_id;
        }
      }, {
        key: "server_host",
        get: function get() {
          return this._data.server_host;
        }
      }, {
        key: "server_version",
        get: function get() {
          return this._data.server_version;
        }
      }, {
        key: "doc_url",
        get: function get() {
          return this._data.doc_url;
        }
      }]);

      return DevInfo;
    })();

    var DevInfo_3 = (function () {
      function DevInfo_3() {
        var data = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

        _classCallCheck(this, DevInfo_3);

        this._data = Object.assign({}, data);
      }

      _createClass(DevInfo_3, [{
        key: "dev_class",
        get: function get() {
          return this._data.dev_class;
        }
      }, {
        key: "server_id",
        get: function get() {
          return this._data.server_id;
        }
      }, {
        key: "server_host",
        get: function get() {
          return this._data.server_host;
        }
      }, {
        key: "server_version",
        get: function get() {
          return this._data.server_version;
        }
      }, {
        key: "doc_url",
        get: function get() {
          return this._data.doc_url;
        }
      }, {
        key: "dev_type",
        get: function get() {
          return this._data.dev_type;
        }
      }]);

      return DevInfo_3;
    })();

    var DevIntrChange = (function () {
      function DevIntrChange() {
        var data = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

        _classCallCheck(this, DevIntrChange);

        this._data = Object.assign({}, data);
      }

      _createClass(DevIntrChange, [{
        key: "dev_started",
        get: function get() {
          return this._data.dev_started;
        }
      }, {
        key: "cmds",
        get: function get() {
          return this._data.cmds;
        }
      }, {
        key: "atts",
        get: function get() {
          return this._data.atts;
        }
      }]);

      return DevIntrChange;
    })();

    var DevPipeBlob = (function () {
      function DevPipeBlob() {
        var data = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

        _classCallCheck(this, DevPipeBlob);

        this._data = Object.assign({}, data);
      }

      _createClass(DevPipeBlob, [{
        key: "name",
        get: function get() {
          return this._data.name;
        }
      }, {
        key: "blob_data",
        get: function get() {
          return this._data.blob_data;
        }
      }]);

      return DevPipeBlob;
    })();

    var DevPipeData = (function () {
      function DevPipeData() {
        var data = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

        _classCallCheck(this, DevPipeData);

        this._data = Object.assign({}, data);
      }

      _createClass(DevPipeData, [{
        key: "name",
        get: function get() {
          return this._data.name;
        }
      }, {
        key: "time",
        get: function get() {
          return this._data.time;
        }
      }, {
        key: "data_blob",
        get: function get() {
          return this._data.data_blob;
        }
      }]);

      return DevPipeData;
    })();

    var DevPipeDataElt = (function () {
      function DevPipeDataElt() {
        var data = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

        _classCallCheck(this, DevPipeDataElt);

        this._data = Object.assign({}, data);
      }

      _createClass(DevPipeDataElt, [{
        key: "name",
        get: function get() {
          return this._data.name;
        }
      }, {
        key: "value",
        get: function get() {
          return this._data.value;
        }
      }, {
        key: "inner_blob",
        get: function get() {
          return this._data.inner_blob;
        }
      }, {
        key: "inner_blob_name",
        get: function get() {
          return this._data.inner_blob_name;
        }
      }]);

      return DevPipeDataElt;
    })();

    var DevVarDoubleStringArray = (function () {
      function DevVarDoubleStringArray() {
        var data = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

        _classCallCheck(this, DevVarDoubleStringArray);

        this._data = Object.assign({}, data);
      }

      _createClass(DevVarDoubleStringArray, [{
        key: "dvalue",
        get: function get() {
          return this._data.dvalue;
        }
      }, {
        key: "svalue",
        get: function get() {
          return this._data.svalue;
        }
      }]);

      return DevVarDoubleStringArray;
    })();

    var DevVarLongStringArray = (function () {
      function DevVarLongStringArray() {
        var data = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

        _classCallCheck(this, DevVarLongStringArray);

        this._data = Object.assign({}, data);
      }

      _createClass(DevVarLongStringArray, [{
        key: "lvalue",
        get: function get() {
          return this._data.lvalue;
        }
      }, {
        key: "svalue",
        get: function get() {
          return this._data.svalue;
        }
      }]);

      return DevVarLongStringArray;
    })();

    var EltInArray = (function () {
      function EltInArray() {
        var data = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

        _classCallCheck(this, EltInArray);

        this._data = Object.assign({}, data);
      }

      _createClass(EltInArray, [{
        key: "start",
        get: function get() {
          return this._data.start;
        }
      }, {
        key: "nb_elt",
        get: function get() {
          return this._data.nb_elt;
        }
      }]);

      return EltInArray;
    })();

    var EventProperties = (function () {
      function EventProperties() {
        var data = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

        _classCallCheck(this, EventProperties);

        this._data = Object.assign({}, data);
      }

      _createClass(EventProperties, [{
        key: "ch_event",
        get: function get() {
          return this._data.ch_event;
        }
      }, {
        key: "per_event",
        get: function get() {
          return this._data.per_event;
        }
      }, {
        key: "arch_event",
        get: function get() {
          return this._data.arch_event;
        }
      }]);

      return EventProperties;
    })();

    var JavaClntIdent = (function () {
      function JavaClntIdent() {
        var data = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

        _classCallCheck(this, JavaClntIdent);

        this._data = Object.assign({}, data);
      }

      _createClass(JavaClntIdent, [{
        key: "MainClass",
        get: function get() {
          return this._data.MainClass;
        }
      }, {
        key: "uuid",
        get: function get() {
          return this._data.uuid;
        }
      }]);

      return JavaClntIdent;
    })();

    var MultiDevFailed = (function () {
      function MultiDevFailed() {
        var data = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

        _classCallCheck(this, MultiDevFailed);

        this._data = Object.assign({}, data);
      }

      _createClass(MultiDevFailed, [{
        key: "errors",
        get: function get() {
          return this._data.errors;
        }
      }]);

      return MultiDevFailed;
    })();

    var NamedDevError = (function () {
      function NamedDevError() {
        var data = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

        _classCallCheck(this, NamedDevError);

        this._data = Object.assign({}, data);
      }

      _createClass(NamedDevError, [{
        key: "name",
        get: function get() {
          return this._data.name;
        }
      }, {
        key: "index_in_call",
        get: function get() {
          return this._data.index_in_call;
        }
      }, {
        key: "err_list",
        get: function get() {
          return this._data.err_list;
        }
      }]);

      return NamedDevError;
    })();

    var PeriodicEventProp = (function () {
      function PeriodicEventProp() {
        var data = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

        _classCallCheck(this, PeriodicEventProp);

        this._data = Object.assign({}, data);
      }

      _createClass(PeriodicEventProp, [{
        key: "period",
        get: function get() {
          return this._data.period;
        }
      }, {
        key: "extensions",
        get: function get() {
          return this._data.extensions;
        }
      }]);

      return PeriodicEventProp;
    })();

    var PipeConfig = (function () {
      function PipeConfig() {
        var data = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

        _classCallCheck(this, PipeConfig);

        this._data = Object.assign({}, data);
      }

      _createClass(PipeConfig, [{
        key: "name",
        get: function get() {
          return this._data.name;
        }
      }, {
        key: "description",
        get: function get() {
          return this._data.description;
        }
      }, {
        key: "label",
        get: function get() {
          return this._data.label;
        }
      }, {
        key: "level",
        get: function get() {
          return this._data.level;
        }
      }, {
        key: "writable",
        get: function get() {
          return this._data.writable;
        }
      }, {
        key: "extensions",
        get: function get() {
          return this._data.extensions;
        }
      }]);

      return PipeConfig;
    })();

    var TimeVal = (function () {
      function TimeVal() {
        var data = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

        _classCallCheck(this, TimeVal);

        this._data = Object.assign({}, data);
      }

      _createClass(TimeVal, [{
        key: "tv_sec",
        get: function get() {
          return this._data.tv_sec;
        }
      }, {
        key: "tv_usec",
        get: function get() {
          return this._data.tv_usec;
        }
      }, {
        key: "tv_nsec",
        get: function get() {
          return this._data.tv_nsec;
        }
      }]);

      return TimeVal;
    })();

    var ZmqCallInfo = (function () {
      function ZmqCallInfo() {
        var data = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

        _classCallCheck(this, ZmqCallInfo);

        this._data = Object.assign({}, data);
      }

      _createClass(ZmqCallInfo, [{
        key: "version",
        get: function get() {
          return this._data.version;
        }
      }, {
        key: "ctr",
        get: function get() {
          return this._data.ctr;
        }
      }, {
        key: "method_name",
        get: function get() {
          return this._data.method_name;
        }
      }, {
        key: "oid",
        get: function get() {
          return this._data.oid;
        }
      }, {
        key: "call_is_except",
        get: function get() {
          return this._data.call_is_except;
        }
      }]);

      return ZmqCallInfo;
    })();

    var Device = (function () {
      function Device() {
        _classCallCheck(this, Device);
      }

      _createClass(Device, [{
        key: "_get_adm_name",
        value: function _get_adm_name() {}
      }, {
        key: "_get_description",
        value: function _get_description() {}
      }, {
        key: "_get_name",
        value: function _get_name() {}
      }, {
        key: "_get_state",
        value: function _get_state() {}
      }, {
        key: "_get_status",
        value: function _get_status() {}
      }, {
        key: "_set_adm_name",
        value: function _set_adm_name(adm_name) {}
      }, {
        key: "_set_description",
        value: function _set_description(description) {}
      }, {
        key: "_set_name",
        value: function _set_name(name) {}
      }, {
        key: "_set_state",
        value: function _set_state(state) {}
      }, {
        key: "_set_status",
        value: function _set_status(status) {}
      }, {
        key: "black_box",
        value: function black_box(n) {}
      }, {
        key: "command_inout",
        value: function command_inout(command, argin) {}
      }, {
        key: "command_list_query",
        value: function command_list_query() {}
      }, {
        key: "command_query",
        value: function command_query(command) {}
      }, {
        key: "get_attribute_config",
        value: function get_attribute_config(names) {}
      }, {
        key: "info",
        value: function info() {}
      }, {
        key: "ping",
        value: function ping() {}
      }, {
        key: "read_attributes",
        value: function read_attributes(names) {}
      }, {
        key: "set_attribute_config",
        value: function set_attribute_config(new_conf) {}
      }, {
        key: "write_attributes",
        value: function write_attributes(values) {}
      }]);

      return Device;
    })();

    var Device_2 = (function (_Device) {
      _inherits(Device_2, _Device);

      function Device_2() {
        _classCallCheck(this, Device_2);

        return _possibleConstructorReturn(this, Object.getPrototypeOf(Device_2).apply(this, arguments));
      }

      _createClass(Device_2, [{
        key: "command_inout_2",
        value: function command_inout_2(command, argin, source) {}
      }, {
        key: "command_inout_history_2",
        value: function command_inout_history_2(command, n) {}
      }, {
        key: "command_list_query_2",
        value: function command_list_query_2() {}
      }, {
        key: "command_query_2",
        value: function command_query_2(command) {}
      }, {
        key: "get_attribute_config_2",
        value: function get_attribute_config_2(names) {}
      }, {
        key: "read_attribute_history_2",
        value: function read_attribute_history_2(name, n) {}
      }, {
        key: "read_attributes_2",
        value: function read_attributes_2(names, source) {}
      }]);

      return Device_2;
    })(Device);

    var Device_3 = (function (_Device_) {
      _inherits(Device_3, _Device_);

      function Device_3() {
        _classCallCheck(this, Device_3);

        return _possibleConstructorReturn(this, Object.getPrototypeOf(Device_3).apply(this, arguments));
      }

      _createClass(Device_3, [{
        key: "get_attribute_config_3",
        value: function get_attribute_config_3(names) {}
      }, {
        key: "info_3",
        value: function info_3() {}
      }, {
        key: "read_attribute_history_3",
        value: function read_attribute_history_3(name, n) {}
      }, {
        key: "read_attributes_3",
        value: function read_attributes_3(names, source) {}
      }, {
        key: "set_attribute_config_3",
        value: function set_attribute_config_3(new_conf) {}
      }, {
        key: "write_attributes_3",
        value: function write_attributes_3(values) {}
      }]);

      return Device_3;
    })(Device_2);

    var Device_4 = (function (_Device_2) {
      _inherits(Device_4, _Device_2);

      function Device_4() {
        _classCallCheck(this, Device_4);

        return _possibleConstructorReturn(this, Object.getPrototypeOf(Device_4).apply(this, arguments));
      }

      _createClass(Device_4, [{
        key: "command_inout_4",
        value: function command_inout_4(command, argin, source, cl_ident) {}
      }, {
        key: "command_inout_history_4",
        value: function command_inout_history_4(command, n) {}
      }, {
        key: "read_attribute_history_4",
        value: function read_attribute_history_4(name, n) {}
      }, {
        key: "read_attributes_4",
        value: function read_attributes_4(names, source, cl_ident) {}
      }, {
        key: "set_attribute_config_4",
        value: function set_attribute_config_4(new_conf, cl_ident) {}
      }, {
        key: "write_attributes_4",
        value: function write_attributes_4(values, cl_ident) {}
      }, {
        key: "write_read_attributes_4",
        value: function write_read_attributes_4(values, cl_ident) {}
      }]);

      return Device_4;
    })(Device_3);

    var Device_5 = (function (_Device_3) {
      _inherits(Device_5, _Device_3);

      function Device_5() {
        _classCallCheck(this, Device_5);

        return _possibleConstructorReturn(this, Object.getPrototypeOf(Device_5).apply(this, arguments));
      }

      _createClass(Device_5, [{
        key: "get_attribute_config_5",
        value: function get_attribute_config_5(names) {}
      }, {
        key: "get_pipe_config_5",
        value: function get_pipe_config_5(names) {}
      }, {
        key: "read_attribute_history_5",
        value: function read_attribute_history_5(name, n) {}
      }, {
        key: "read_attributes_5",
        value: function read_attributes_5(names, source, cl_ident) {}
      }, {
        key: "read_pipe_5",
        value: function read_pipe_5(name, cl_ident) {}
      }, {
        key: "set_attribute_config_5",
        value: function set_attribute_config_5(new_conf, cl_ident) {}
      }, {
        key: "set_pipe_config_5",
        value: function set_pipe_config_5(new_conf, cl_ident) {}
      }, {
        key: "write_pipe_5",
        value: function write_pipe_5(value, cl_ident) {}
      }, {
        key: "write_read_attributes_5",
        value: function write_read_attributes_5(values, r_names, cl_ident) {}
      }, {
        key: "write_read_pipe_5",
        value: function write_read_pipe_5(value, cl_ident) {}
      }]);

      return Device_5;
    })(Device_4);

    var tango = generatedTango;
    exports.Connector = Connector;
    exports.connector = connector;
    exports.setConnector = setConnector;
    exports.proxy = proxy;
    exports.struct = struct;
    exports.tango = tango;
  });
});
//# sourceMappingURL=tangojs.js.map
